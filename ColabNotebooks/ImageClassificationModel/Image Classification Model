{"cells":[{"cell_type":"markdown","source":["# PROJECT ONE: Implementing a Basic Image Classification Model (MNIST or CIFAR-10)\n","\n","Computer Vision: Week One: Project One:\n","by monigarr@MoniGarr.com\n","https://researchengineer.wordpress.com/2024/11/29/week-1-2-foundational-deep-learning-for-computer-vision/"],"metadata":{"id":"TYQfzt8QR3uZ"}},{"cell_type":"markdown","metadata":{"id":"kDn_lVxg3Z2G"},"source":["To import a library that's not in Colaboratory by default, you can use `!pip install` or `!apt-get install`."]},{"cell_type":"code","source":["!pip install datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"czicMr93UyiG","executionInfo":{"status":"ok","timestamp":1733326763844,"user_tz":300,"elapsed":5276,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"3b92c7d7-9122-483a-a301-be5003ee34b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting datasets\n","  Downloading datasets-3.1.0-py3-none-any.whl.metadata (20 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets) (3.16.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from datasets) (1.26.4)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (17.0.0)\n","Collecting dill<0.3.9,>=0.3.0 (from datasets)\n","  Downloading dill-0.3.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from datasets) (2.2.2)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.10/dist-packages (from datasets) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.10/dist-packages (from datasets) (4.66.6)\n","Collecting xxhash (from datasets)\n","  Downloading xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n","Collecting multiprocess<0.70.17 (from datasets)\n","  Downloading multiprocess-0.70.16-py310-none-any.whl.metadata (7.2 kB)\n","Collecting fsspec<=2024.9.0,>=2023.1.0 (from fsspec[http]<=2024.9.0,>=2023.1.0->datasets)\n","  Downloading fsspec-2024.9.0-py3-none-any.whl.metadata (11 kB)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.11.2)\n","Requirement already satisfied: huggingface-hub>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.26.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from datasets) (24.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (6.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (2.4.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (24.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.5.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (6.1.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (0.2.0)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.17.2)\n","Requirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (4.0.3)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.23.0->datasets) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.32.2->datasets) (2024.8.30)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.16.0)\n","Downloading datasets-3.1.0-py3-none-any.whl (480 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m480.6/480.6 kB\u001b[0m \u001b[31m21.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.8-py3-none-any.whl (116 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m116.3/116.3 kB\u001b[0m \u001b[31m9.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fsspec-2024.9.0-py3-none-any.whl (179 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m179.3/179.3 kB\u001b[0m \u001b[31m13.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading multiprocess-0.70.16-py310-none-any.whl (134 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m134.8/134.8 kB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.1/194.1 kB\u001b[0m \u001b[31m15.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xxhash, fsspec, dill, multiprocess, datasets\n","  Attempting uninstall: fsspec\n","    Found existing installation: fsspec 2024.10.0\n","    Uninstalling fsspec-2024.10.0:\n","      Successfully uninstalled fsspec-2024.10.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","gcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.9.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed datasets-3.1.0 dill-0.3.8 fsspec-2024.9.0 multiprocess-0.70.16 xxhash-3.5.0\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import backend as K\n","from tensorflow.keras.datasets import mnist, cifar10\n","from tensorflow.keras.models import Sequential, Model, load_model\n","from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Input, Reshape\n","from tensorflow.keras.utils import to_categorical"],"metadata":{"id":"tzOrSvUOJ_xE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load & Preprocess Data\n","\n","# Load MNIST dataset\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","# Preprocess data\n","x_train = x_train.reshape(60000, 28, 28, 1)\n","x_test = x_test.reshape(10000, 28, 28, 1)\n","x_train = x_train.astype('float32') / 255\n","x_test = x_test.astype('float32') / 255\n","y_train = to_categorical(y_train, 10)\n","y_test = to_categorical(y_test, 10)\n","\n"],"metadata":{"id":"4JK4pZJsKGfv","executionInfo":{"status":"ok","timestamp":1733369640242,"user_tz":300,"elapsed":2384,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9941c39a-4b09-4098-90a5-f0aa261d7d19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n"]}]},{"cell_type":"code","source":["# Create the Model\n","model = Sequential([\n","  Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n","  MaxPooling2D((2, 2)),\n","  Flatten(),\n","  Dense(128, activation='relu'),\n","  Dense(10, activation='softmax')\n","])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FA0eYE8cKIrI","executionInfo":{"status":"ok","timestamp":1733369643264,"user_tz":300,"elapsed":389,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"ba985a72-6aad-4c7d-f7ca-b4013cf05662"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9m8Ro8WwKKzp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compile the Model\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])"],"metadata":{"id":"qE-tm4NpPGhV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train the Model\n","model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yPiATjP9KM8l","executionInfo":{"status":"ok","timestamp":1733370230649,"user_tz":300,"elapsed":581433,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"d7705c9d-8547-4edd-f146-d84493716dcc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 23ms/step - accuracy: 0.9118 - loss: 0.2986 - val_accuracy: 0.9825 - val_loss: 0.0504\n","Epoch 2/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 22ms/step - accuracy: 0.9847 - loss: 0.0515 - val_accuracy: 0.9840 - val_loss: 0.0485\n","Epoch 3/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 22ms/step - accuracy: 0.9902 - loss: 0.0313 - val_accuracy: 0.9845 - val_loss: 0.0488\n","Epoch 4/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 22ms/step - accuracy: 0.9939 - loss: 0.0192 - val_accuracy: 0.9874 - val_loss: 0.0392\n","Epoch 5/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 22ms/step - accuracy: 0.9963 - loss: 0.0119 - val_accuracy: 0.9880 - val_loss: 0.0388\n","Epoch 6/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 22ms/step - accuracy: 0.9976 - loss: 0.0080 - val_accuracy: 0.9868 - val_loss: 0.0469\n","Epoch 7/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 22ms/step - accuracy: 0.9983 - loss: 0.0061 - val_accuracy: 0.9859 - val_loss: 0.0479\n","Epoch 8/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 22ms/step - accuracy: 0.9985 - loss: 0.0048 - val_accuracy: 0.9849 - val_loss: 0.0531\n","Epoch 9/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 22ms/step - accuracy: 0.9986 - loss: 0.0044 - val_accuracy: 0.9866 - val_loss: 0.0538\n","Epoch 10/10\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 22ms/step - accuracy: 0.9991 - loss: 0.0031 - val_accuracy: 0.9866 - val_loss: 0.0538\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x7eb281bdda50>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# BUILD SIMPLE IMAGE\n","#\n","# AUTOENCODER FOR DIENSIONALITY REDUCTION\n","\n","# Create Autoencoder Model\n","input_dim = 784  # For MNIST, adjust for CIFAR-10\n","encoding_dim = 32\n","\n","# Create Autoencoder Model\n","input_img = Input(shape=(28, 28, 1))  # Input shape for MNIST images\n","\n","# Encoder\n","encoded = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)  # Use padding='same'\n","\n","# Decoder\n","decoded = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)  # Use padding='same'\n","decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(decoded)  # Final output with padding='same'\n","\n","# Autoencoder\n","autoencoder = Model(input_img, decoded)\n","\n"],"metadata":{"id":"KSM6fI0WKPK8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compile and Train Autoencoder\n","autoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n","autoencoder.fit(x_train, x_train, epochs=10, batch_size=256, validation_data=(x_test, x_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYHaZP4pKRIl","outputId":"66ed58e3-aa94-48b7-ad7f-40b30905c4f9","executionInfo":{"status":"ok","timestamp":1733374126745,"user_tz":300,"elapsed":1911462,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m154s\u001b[0m 653ms/step - loss: 0.2863 - val_loss: 0.0637\n","Epoch 2/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 631ms/step - loss: 0.0634 - val_loss: 0.0617\n","Epoch 3/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 627ms/step - loss: 0.0618 - val_loss: 0.0611\n","Epoch 4/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m148s\u001b[0m 630ms/step - loss: 0.0612 - val_loss: 0.0607\n","Epoch 5/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m205s\u001b[0m 643ms/step - loss: 0.0609 - val_loss: 0.0604\n","Epoch 6/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m199s\u001b[0m 634ms/step - loss: 0.0606 - val_loss: 0.0602\n","Epoch 7/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m204s\u001b[0m 643ms/step - loss: 0.0605 - val_loss: 0.0600\n","Epoch 8/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 622ms/step - loss: 0.0602 - val_loss: 0.0598\n","Epoch 9/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 626ms/step - loss: 0.0601 - val_loss: 0.0597\n","Epoch 10/10\n","\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m148s\u001b[0m 630ms/step - loss: 0.0599 - val_loss: 0.0596\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x7eb27e9f9840>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# hdf5 file format\n","\n","autoencoder.save('/content/autoencoder_model2.h5')  # Save in Colab's root directory\n","\n","autoencoder = load_model('autoencoder_model2.h5')\n","print(\"Loaded autoencoder from 'autoencoder_model2.h5'.\")\n"],"metadata":{"id":"hAaAjCQ1UMQ1","executionInfo":{"status":"ok","timestamp":1733374962036,"user_tz":300,"elapsed":304,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"7421efd6-d609-446f-eaaa-272110d6f211","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded autoencoder from 'autoencoder_model.keras'.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 14 variables whereas the saved optimizer has 2 variables. \n","  saveable.load_own_variables(weights_store.get(inner_path))\n"]}]},{"cell_type":"code","source":["#tensorflow model\n","autoencoder.save('/content/autoencoder_model2.keras')  # Replace with your desired path\n","\n","loaded_autoencoder = load_model('/content/autoencoder_model2.keras')\n","print(\"Loaded autoencoder from 'autoencoder_model2.keras'.\")"],"metadata":{"id":"98mTtHXtUQ3G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733375360273,"user_tz":300,"elapsed":846,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"19d611f8-fbce-4d4b-d500-f09e78546d70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded autoencoder from 'autoencoder_model2.keras'.\n"]}]},{"cell_type":"code","source":["#TEST autoencoder_model.keras\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.datasets import mnist\n","\n","# Load the saved model\n","# Use the appropriate filename depending on the format you saved\n","autoencoder = load_model('autoencoder_model.keras')  # or 'autoencoder_model.h5'\n","\n","# Load and preprocess test data (MNIST dataset in this example)\n","(_, _), (x_test, _) = mnist.load_data()  # Only test data\n","x_test = x_test.astype('float32') / 255.0  # Normalize pixel values\n","x_test = x_test.reshape(-1, 28, 28, 1)  # Reshape to (28, 28, 1)\n","\n","# Reconstruct the test data\n","reconstructed = autoencoder.predict(x_test)\n","\n","# Calculate reconstruction error (Mean Squared Error)\n","mse = np.mean(np.square(x_test - reconstructed))\n","print(f\"Reconstruction Mean Squared Error: {mse}\")\n","\n","# Visualize original and reconstructed images\n","def plot_original_and_reconstructed(original, reconstructed, n=5):\n","    plt.figure(figsize=(10, 4))\n","    for i in range(n):\n","        # Original images\n","        plt.subplot(2, n, i + 1)\n","        plt.imshow(original[i].reshape(28, 28), cmap='gray')\n","        plt.title(\"Original\")\n","        plt.axis('off')\n","\n","        # Reconstructed images\n","        plt.subplot(2, n, n + i + 1)\n","        plt.imshow(reconstructed[i].reshape(28, 28), cmap='gray')\n","        plt.title(\"Reconstructed\")\n","        plt.axis('off')\n","    plt.show()\n","\n","# Plot the first 5 original vs. reconstructed images\n","plot_original_and_reconstructed(x_test, reconstructed)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"iO98zGXjOpeC","executionInfo":{"status":"ok","timestamp":1733375656377,"user_tz":300,"elapsed":9371,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"3f1a131a-1874-4115-8608-b378898c200c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 24ms/step\n","Reconstruction Mean Squared Error: 0.0002007293951464817\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#TEST autoencoder_model.h5\n","\n","from tensorflow.keras.models import load_model\n","\n","# Load the autoencoder model\n","autoencoder = load_model('autoencoder_model.h5')\n","print(\"Model loaded successfully.\")\n","\n","import numpy as np\n","from tensorflow.keras.datasets import mnist\n","\n","# Load test data\n","(_, _), (x_test, _) = mnist.load_data()\n","\n","# Preprocess test data\n","x_test = x_test.astype('float32') / 255.0\n","x_test = np.expand_dims(x_test, axis=-1)  # Add channel dimension\n","\n","# Use the model to predict (reconstruct the images)\n","reconstructed = autoencoder.predict(x_test)\n","\n","# Example: Visualize the original and reconstructed images\n","import matplotlib.pyplot as plt\n","\n","n = 10  # Number of images to display\n","plt.figure(figsize=(20, 4))\n","for i in range(n):\n","    # Original images\n","    ax = plt.subplot(2, n, i + 1)\n","    plt.imshow(x_test[i].squeeze(), cmap='gray')  # Remove channel dimension for visualization\n","    plt.title(\"Original\")\n","    plt.axis(\"off\")\n","\n","    # Reconstructed images\n","    ax = plt.subplot(2, n, i + 1 + n)\n","    plt.imshow(reconstructed[i].squeeze(), cmap='gray')  # Remove channel dimension for visualization\n","    plt.title(\"Reconstructed\")\n","    plt.axis(\"off\")\n","plt.show()\n","\n","loss = autoencoder.evaluate(x_test, x_test, verbose=0)\n","print(f\"Reconstruction Loss: {loss}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"_4TvzON4QBfz","executionInfo":{"status":"ok","timestamp":1733375941833,"user_tz":300,"elapsed":16169,"user":{"displayName":"MoniGarr","userId":"00175597594754037564"}},"outputId":"1b0f3570-7a9a-498f-f53e-6103d126d2e3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stdout","text":["Model loaded successfully.\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 26ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x400 with 20 Axes>"],"image/png":"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qDs36s4+as6NmvMHdedG3fmDunOj7uyj5tyoOX9Qd27UnX3UnBs15w/qzi0z153VnhCJiYkiIrJly5bz2caNG6V9+/ZSoEAByZkzp9SuXVvmzZunHnvkyBF54IEHpGzZshIbGyslS5aUu+66Sw4cOHB+zr59++Tee++VokWLSs6cOaV69ery5ptvuo7z572rnnnmGXn11VclISFBYmNj5dprr5X//e9/rrl79uyRe+65R0qWLCmxsbFSvHhxadOmjWzbtk1ERMqWLSvr1q2TpUuXnv86UaNGjUTkwteMli5dKr169ZIiRYpIyZIlRUSka9euUrZsWfVnHDlypMTExKh86tSpUqdOHcmVK5fEx8dLgwYNZPHixSHX8OfvbcCAAVKqVCmJjY2VChUqyNNPPy0pKSnq99u1a1fJnz+/XHbZZXL33XfLkSNH1FrSI+qOugsCdUfd+Y2ao+aCQN1Rd0Gg7qg7v1Fz1FwQqDvqzm/UHDUXBOou89ZdRL8J4fXnX0h8fLyIiKxbt05uuOEGKVGihAwZMkRy584t06dPl7Zt28qsWbPk1ltvFRGRpKQkSUxMlA0bNki3bt3kmmuukQMHDsi8efNk586dUqhQITl58qQ0atRINm/eLH369JFy5crJjBkzpGvXrnLkyBHp37+/ay3vvvuuHDt2TO6//36JiYmRsWPHyj//+U/59ddfJXv27CIi0q5dO1m3bp307dtXypYtK/v27ZNPPvlEduzYIWXLlpXx48dL3759JU+ePDJ06FARESlatKjreXr16iWFCxeW4cOHy/Hjxy/5d/b444/LyJEjpV69ejJq1CjJkSOHfPvtt/L555/LTTfddNE1nDhxQho2bCi7du2S+++/X0qXLi1ff/21PPLII7J7924ZP368iIg4jiNt2rSR5cuXS8+ePaVy5coyZ84cufvuuy95vdGIuqPugkDdUXd+o+aouSBQd9RdEKg76s5v1Bw1FwTqjrrzGzVHzQWBusvEdedEwOTJkx0RcT799FNn//79zm+//ebMnDnTKVy4sBMbG+v89ttvjuM4TpMmTZxq1ao5p06dOv/YlJQUp169ek7FihXPZ8OHD3dExJk9e7Z6rpSUFMdxHGf8+PGOiDhTp049/7MzZ844119/vZMnTx7njz/+cBzHcbZu3eqIiFOwYEHn0KFD5+d+8MEHjog48+fP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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Reconstruction Loss: 0.05959237739443779\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/snippets/importing_libraries.ipynb","timestamp":1733326621378}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}